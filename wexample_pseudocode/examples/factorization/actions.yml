actions:
  analysis:
    collect_methods:
      description: "Collecter toutes les méthodes correspondant au pattern"
      parameters:
        - method_pattern
        - source_dirs
      output:
        - method_locations
        - method_signatures
        
    analyze_similarity:
      description: "Analyser la similarité entre les implémentations"
      parameters:
        - method_implementations
      output:
        - similarity_groups
        - difference_reports
        
    suggest_factorization:
      description: "Suggérer une stratégie de factorisation"
      parameters:
        - similarity_groups
        - existing_base_classes
      output:
        - factorization_plan:
            use_existing_base: bool
            suggested_base_name: str
            method_signature: str
            required_parameters: list
            
  implementation:
    create_base_class:
      description: "Créer une nouvelle classe de base si nécessaire"
      template: templates/base_class.py.j2
      parameters:
        - class_name
        - abstract_methods
        
    move_method_to_base:
      description: "Déplacer une méthode vers la classe de base"
      steps:
        - extract_common_implementation
        - create_base_method
        - update_child_classes
        
    update_inheritance:
      description: "Mettre à jour l'héritage des classes"
      steps:
        - add_base_class_import
        - update_class_definition
        - verify_super_calls
